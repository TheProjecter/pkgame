Actions.py模块定义了各种技能。使用者也可以自己扩充这个模块。

只有在Player.skills链表中出现的技能才有机会被玩家直接使用，但是也有在其它条件下激发的技能。

所有的技能都需要一个构造函数，对于标准的主动技能，应该有一个__init__(self, sender)，技能对象可以在这个方法中保存它的施放者以及发送消息必须的world对象。在这个方法中，技能应该初始化一个字符串类型的name属性。

所有的主动技能都要求实现一个__call__(self)方法。通过调用此方法来实现具体的业务逻辑。通常来说，技能的效果通过相关属性掷骰子实现。技能与属性的关联有来自D&D的模仿痕迹，如普通攻击的命中取决于敏捷数掷骰，而效果与力量有关。烈焰红唇的命中和效果则与感知和魅力有关。而甜言蜜语的命中与感知和魅力有关，效果与智力有关。这个游戏比D&D系统更强调乐趣而不是实力，故计算方法通常远比D&D更为随机化。通常攻击目标在这个方法里访问self.sender.target获得，因为多人混战时玩家的目标有可能在不同的回合发生改变。

所有的主动技能要求实现一个checked(self)方法。有些技能可能需要满足某种条件才能使用，例如两次施放时间的最小间隔，通过此方法，Player筛选当前可以使用的技能。对于Attack这样可以随时使用的技能，可以直接返回true，对于需要计时的技能，可以在checked方法中进行计时计算。

AntiAttck比较特殊，它并不是主动技能，而是在Attack攻击被闪避后被动激发，它的sender是Attack的target，而target是Attacke的sender，故这里用了__init__(self, sender, target)方法构造。

RanderPick技能也比较特殊，它访问world.items后，随机从items中选取一个构造到sender的items列表中。为了避免出现空序列选取造成的异常，在checked中要验证world.items是否有可用的物品。
